AWSTemplateFormatVersion: '2010-09-09'
Description: "CloudFormation template for S3 pre-signed URL service for RojoPark"

Parameters:
  LambdaBucketName:
    Type: String
    Default: "rojo-park-lambda-bucket"
    Description: "S3 bucket to store Lambda deployment packages"

Resources:
  RojoImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "rojo-park-img-storage"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  RojoImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RojoImageBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${RojoImageBucket}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "private"

  RojoS3LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RojoS3LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: RojoS3PresignedUrlAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${RojoImageBucket}"
                  - !Sub "arn:aws:s3:::${RojoImageBucket}/*"
        - PolicyName: RojoCloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  RojoGeneratePresignedUrlFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RojoGeneratePresignedUrlFunction
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: s3/generate-presigned-url.zip
      Role: !GetAtt RojoS3LambdaExecutionRole.Arn
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref RojoImageBucket

  RojoS3ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RojoS3Api

  RojoPresignedUrlResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RojoS3ApiGateway.RootResourceId
      PathPart: generate-presigned-url
      RestApiId: !Ref RojoS3ApiGateway

  RojoPresignedUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RojoS3ApiGateway
      ResourceId: !Ref RojoPresignedUrlResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RojoGeneratePresignedUrlFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  RojoS3ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RojoPresignedUrlMethod
    Properties:
      RestApiId: !Ref RojoS3ApiGateway
      StageName: prod

  RojoPresignedUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RojoGeneratePresignedUrlFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RojoS3ApiGateway}/*"

Outputs:
  RojoPresignedUrlApi:
    Description: "API Endpoint to Get Pre-signed URL"
    Value: !Sub "https://${RojoS3ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/generate-presigned-url"
